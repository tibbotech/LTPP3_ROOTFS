--- /root/SP7021/linux/kernel/drivers/irqchip/irq-sp7021-intc.c	2023-02-07 01:31:28.000000000 +0000
+++ /root/LTPP3_ROOTFS/kernel/drivers/irqchip/irq-sp7021-intc.c	2023-02-10 06:19:00.000000000 +0000
@@ -65,9 +65,6 @@
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 #define HW_IRQ_GPIO_INT0                120
 #define HW_IRQ_GPIO_INT7                127
-#define SP_IRQ_TYPE_EDGE_NONE           0x00
-#define SP_IRQ_TYPE_EDGE_RISING         0x01
-#define SP_IRQ_TYPE_EDGE_FALLING        0x02
 #define SP_IRQ_TYPE_EDGE_ACTIVE         0x80
 static char edge_trigger[SP_INTC_HWIRQ_MAX-SP_INTC_HWIRQ_MIN];
 #endif
@@ -95,20 +92,23 @@
 		return;
 
 	idx = data->hwirq / 32;
-	mask = (1 << (data->hwirq % 32));
+	mask = BIT(data->hwirq % 32);
 
 	spin_lock(&sp_intc.lock);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-	if (edge_trigger[data->hwirq] & (SP_IRQ_TYPE_EDGE_RISING|SP_IRQ_TYPE_EDGE_FALLING)) {
+	if (edge_trigger[data->hwirq] & IRQ_TYPE_EDGE_BOTH) {
 		u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-
-		if (edge_trigger[data->hwirq] == SP_IRQ_TYPE_EDGE_RISING)
+// FIX FOR THE INTERRUPT ISSUE
+		if (edge_trigger[data->hwirq] == IRQ_TYPE_EDGE_RISING) {
 			trig_lvl |= mask;
-		else
+			edge_trigger[data->hwirq] = IRQ_TYPE_EDGE_FALLING;
+		}
+		else {
 			trig_lvl &= ~mask;
-
+			edge_trigger[data->hwirq] = IRQ_TYPE_EDGE_RISING;
+		}
 		writel_relaxed(trig_lvl, &sp_intc.g0->intr_polarity[idx]);
-		edge_trigger[data->hwirq] |= SP_IRQ_TYPE_EDGE_ACTIVE;
+		
 	}
 #endif
 	writel_relaxed(mask, &sp_intc.g1->intr_clr[idx]);
@@ -182,7 +182,7 @@
 	case IRQ_TYPE_EDGE_RISING:
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_RISING;
+			edge_trigger[data->hwirq] = IRQ_TYPE_EDGE_RISING;
 			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
 		} else {
 			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
@@ -195,7 +195,20 @@
 	case IRQ_TYPE_EDGE_FALLING:
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_FALLING;
+			edge_trigger[data->hwirq] = IRQ_TYPE_EDGE_FALLING;
+			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
+		} else {
+			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
+		}
+#else
+		writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
+#endif
+		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
+		break;
+	case IRQ_TYPE_EDGE_BOTH:
+#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
+		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
+			edge_trigger[data->hwirq] = IRQ_TYPE_EDGE_FALLING;
 			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
 		} else {
 			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
@@ -207,21 +220,21 @@
 		break;
 	case IRQ_TYPE_LEVEL_HIGH:
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
+		edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 #endif
 		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
 		writel_relaxed((trig_lvl & ~mask), &sp_intc.g0->intr_polarity[idx]);
 		break;
 	case IRQ_TYPE_LEVEL_LOW:
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
+		edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 #endif
 		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
 		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
 		break;
 	default:
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
+		edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 #endif
 		spin_unlock_irqrestore(&sp_intc.lock, flags);
 		pr_err("%s: type=%d\n", __func__, flow_type);
@@ -312,10 +325,10 @@
 		if (edge_trigger[hwirq] & SP_IRQ_TYPE_EDGE_ACTIVE) {
 			u32 idx = hwirq / 32;
 			u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-			u32 mask = 1 << (hwirq % 32);
+			u32 mask = BIT(hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING)
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING)
 				trig_lvl &= ~mask;
 			else
 				trig_lvl |= mask;
@@ -343,10 +356,10 @@
 		if (edge_trigger[hwirq] & SP_IRQ_TYPE_EDGE_ACTIVE) {
 			u32 idx = hwirq / 32;
 			u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-			u32 mask = 1 << (hwirq % 32);
+			u32 mask = BIT(hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING)
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING)
 				trig_lvl &= ~mask;
 			else
 				trig_lvl |= mask;
