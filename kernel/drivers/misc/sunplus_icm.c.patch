--- /root/SP7021/linux/kernel/drivers/misc/sunplus_icm.c	2023-02-18 09:56:25.000000000 +0000
+++ /root/LTPP3_ROOTFS/kernel/drivers/misc/sunplus_icm.c	2023-03-14 01:37:16.000000000 +0000
@@ -15,6 +15,9 @@
 #include <linux/of_platform.h>
 #include <linux/delay.h>
 #include <misc/sunplus_icm.h>
+#include <net/sock.h>
+#include <linux/netlink.h>
+#include <linux/skbuff.h>
 
 #define NUM_ICM 4
 
@@ -254,13 +257,56 @@
 #ifdef CONFIG_SUNPLUS_ICM_TEST /* test & example */
 static u32 tscnt; /* test signal counter */
 
+#define NETLINK_ICM_PROTOCOL 31
+#define NETLINK_ICM_PAYLOAD_SIZE 1024
+static struct sock *nl_sock;
+int nl_pid;
+
 static void test_cbf(int i, u32 cnt, u32 fstate)
 {
 	u32 pwh, pwl;
+	int stat; 
+	struct nlmsghdr *nlh;
+	struct sk_buff *skb_tx;
+	char icm_data[256];
+	char icm_data_1[256];
 
 	sunplus_icm_pwidth(i, &pwh, &pwl);
 	pr_info("icm%d_%05u: %10u %04x %u %u\n", i, ++tscnt, cnt, fstate,
 			pwh, pwl);
+
+	memset(icm_data_1, 0, sizeof(icm_data));
+	icm_data_1[0] = i & 0xFF;
+	icm_data_1[1] = (pwh >> 24) & 0xFF;
+	icm_data_1[2] = (pwh >> 16) & 0xFF;
+	icm_data_1[3] = (pwh >>  8) & 0xFF;
+	icm_data_1[4] = (pwh >>  0) & 0xFF;
+	icm_data_1[5] = (pwl >> 24) & 0xFF;
+	icm_data_1[6] = (pwl >> 16) & 0xFF;
+	icm_data_1[7] = (pwl >>  8) & 0xFF;
+	icm_data_1[8] = (pwl >>  0) & 0xFF;
+	
+	memset(icm_data, 0, sizeof(icm_data));
+	snprintf(icm_data, sizeof(icm_data),
+		"%d%d%d%d%d%d%d%d%d", icm_data_1[0], icm_data_1[1], icm_data_1[2],
+		icm_data_1[3],icm_data_1[4], icm_data_1[5], icm_data_1[6],
+		icm_data_1[7], icm_data_1[8]);
+
+	skb_tx = nlmsg_new(sizeof(icm_data), 0);
+	if (!skb_tx) {
+		pr_warn("skb alloc failed!\n");
+		return;
+	}
+
+	nlh = nlmsg_put(skb_tx, 0, 0, NLMSG_DONE, sizeof(icm_data), 0);
+	NETLINK_CB(skb_tx).dst_group = 0; 
+	strncpy(nlmsg_data(nlh), icm_data, sizeof(icm_data));
+
+	stat = nlmsg_unicast(nl_sock, skb_tx, nl_pid);
+	if (stat < 0)
+		pr_warn("nlmsg_unicast() failed (err=%d)\n", stat);
+
+	pr_info("tx_data sent\n");
 }
 
 static void test_help(void)
@@ -360,11 +406,24 @@
 module_param_cb(test, &test_ops, NULL, 0600);
 #endif
 
+static void netlink_recv(struct sk_buff *skb)
+{
+	struct nlmsghdr *nlh;
+	nlh = (struct nlmsghdr *)skb->data;
+	nl_pid = nlh->nlmsg_pid;
+	pr_info("received from PID %d:\n"
+		"\"%s\"\n", nl_pid, (char *)NLMSG_DATA(nlh));	
+}
+
+static struct netlink_kernel_cfg nl_kernel_cfg = {
+	.input = netlink_recv,
+};                 
 
 static const struct of_device_id sunplus_icm_of_match[] = {
 	{ .compatible = "sunplus,sp7021-icm" },
 	{},
 };
+
 MODULE_DEVICE_TABLE(of, sunplus_icm_of_match);
 
 static int sunplus_icm_probe(struct platform_device *pdev)
@@ -406,6 +465,14 @@
 	RPM_GET(dev->dev);
 	RPM_PUT(dev->dev);
 
+	pr_info("creating kernel netlink socket\n");
+
+	nl_sock = netlink_kernel_create(&init_net, NETLINK_ICM_PROTOCOL,&nl_kernel_cfg);
+	if (!nl_sock) {
+		pr_warn("netlink_kernel_create failed\n");
+		return PTR_ERR(nl_sock);
+	}
+
 	while (i < NUM_ICM) {
 		ret = devm_request_irq(&pdev->dev, dev->irq + i, sunplus_icm_isr,
 			IRQF_TRIGGER_RISING, "sunplus_icm", dev);
