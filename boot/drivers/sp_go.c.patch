--- /root/SP7021/boot/uboot/board/sunplus/pentagram_board/sp_go.c	2023-04-13 16:17:25.000000000 +0000
+++ /root/LTPP3_ROOTFS/boot/drivers/sp_go.c	2023-05-22 06:35:03.000000000 +0000
@@ -4,6 +4,7 @@
 #include <mapmem.h>
 #include <malloc.h>
 #include <cpu_func.h>
+#include <watchdog.h>
 
 
 static uint32_t sum32(uint32_t sum, uint8_t *data, uint32_t len)
@@ -440,3 +441,285 @@
 );
 
 #endif
+
+
+
+#define LED_BAR_DATA 5
+#define LED_BAR_CLOCK 4
+#define GREEN_LED 7
+#define RED_LED 6
+#define BUZZER_IO 48
+#define BUTTON_IO 3
+
+extern int sp_gpio_out_set(u32 offset, u32 value);
+extern int sp_gpio_oe_set(u32 offset, u32 value);
+extern int sp_gpio_out_get(u32 offset, u32 *value);
+extern int sp_gpio_in(u32 offset, u32 *value);
+
+static void tb_init_io(void){
+	static bool isInit = false;
+	if(isInit)
+	{
+		return;
+	}
+		//Initialize the red/green leds
+	sp_gpio_out_set(GREEN_LED, 1);
+    sp_gpio_out_set(RED_LED, 1);
+	sp_gpio_out_set(BUZZER_IO, 1);
+	sp_gpio_oe_set(GREEN_LED, 1);
+    sp_gpio_oe_set(RED_LED, 1);
+	sp_gpio_oe_set(BUZZER_IO, 1);
+	sp_gpio_oe_set(BUTTON_IO, 0);
+
+	//Initialize the led bar
+	sp_gpio_out_set(LED_BAR_DATA, 1);
+    sp_gpio_out_set(LED_BAR_CLOCK, 1);
+	sp_gpio_oe_set(LED_BAR_DATA, 1);
+    sp_gpio_oe_set(LED_BAR_CLOCK, 1);
+
+	for (int i = 0; i < 5; i++) {
+		sp_gpio_out_set(LED_BAR_DATA, 1);
+        sp_gpio_out_set(LED_BAR_CLOCK, 0);
+		sp_gpio_out_set(LED_BAR_CLOCK, 1);
+    }
+	isInit = true;
+}
+
+static int do_tb_init(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	tb_init_io();
+	sp_gpio_out_set(GREEN_LED, 0);
+	mdelay(3000);
+	sp_gpio_out_set(GREEN_LED, 1);
+
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_init, 1, 1, do_tb_init,
+	"Initializes all status LEDs to off",
+	""
+);
+
+
+static int do_tb_green(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	ulong led_state = simple_strtoul(argv[1], NULL, 10);
+	tb_init_io();
+	sp_gpio_out_set(GREEN_LED, led_state);
+	return 0;
+}
+
+U_BOOT_CMD(
+ tb_green, 2, 1, do_tb_green,
+	"Sets the green LED state. On: 0, Off: 1",
+	""
+);
+
+static int do_tb_red(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	ulong led_state = simple_strtoul(argv[1], NULL, 10);
+	tb_init_io();
+	sp_gpio_out_set(RED_LED, led_state);
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_red, 2, 1, do_tb_red,
+	"Sets the red LED state. On: 0, Off: 1",
+	""
+);
+
+
+static int do_tb_bar(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	uint8_t value = simple_strtoul(argv[1], NULL, 10);
+	tb_init_io();
+	for (int i = 0; i < 5; i++) {
+		sp_gpio_out_set(LED_BAR_DATA, !(value & (1 << i)));
+        sp_gpio_out_set(LED_BAR_CLOCK, 0);
+		sp_gpio_out_set(LED_BAR_CLOCK, 1);
+    }
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_bar, 2, 1, do_tb_bar,
+	"Sets the blue LED bar state",
+	""
+);
+
+
+static int do_tb_update(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	static uint8_t state = 0;
+	static uint8_t count = 0;
+	uint8_t value = 0;
+	tb_init_io();
+	value = 1 << count;
+	switch(state){
+		case 0:
+		{
+			count++;
+			if(count == 4)
+			{
+				state = 1;
+			}
+			break;
+		}
+		case 1:
+		{
+			count--;
+			if(count == 0)
+			{
+				state = 0;
+			}
+			break;
+		}
+	}
+	for (int i = 0; i < 5; i++) {
+		sp_gpio_out_set(LED_BAR_DATA, !(value & (1 << i)));
+        sp_gpio_out_set(LED_BAR_CLOCK, 0);
+		sp_gpio_out_set(LED_BAR_CLOCK, 1);
+    }
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_update, 1, 1, do_tb_update,
+	"Sets the next state for the status bar LEDs when flashing",
+	""
+);
+
+static int do_tb_upgfl(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	tb_init_io();
+	sp_gpio_out_set(GREEN_LED, 1);
+	sp_gpio_out_set(RED_LED, 0);
+	printf("The update has failed!\n");
+	do{
+
+	}while(1);
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_upgfl, 1, 1, do_tb_upgfl,
+	"Sets the red LED on and never exits",
+	""
+);
+
+static void tb_play_frequency( int freq, int time ){
+	int  t = ((1000000/freq)/2);
+	while(time > 0){
+		sp_gpio_out_set(BUZZER_IO, 0);
+		udelay(t);
+		time-=t;
+		sp_gpio_out_set(BUZZER_IO, 1);
+		udelay(t);
+		time-=t;
+		if(time < 0)
+		{
+			time = 0;
+		}
+	}
+}
+
+static void ltpp3g2_easter_egg(void){
+	#define Fs5 740
+	#define G5 783
+	#define Cs6 1109
+	#define Fs6 1480
+	#define G6  1568
+	#define E   1318
+	int i = 0;
+	int notes [13] =    {    Fs5,     G5,    Fs5,    Cs6,    Fs6,     G6,    Cs6,    Fs5,     G5,    Fs5,     G5,     Fs6,       E};
+	int durations[13] = { 125000, 125000, 250000, 500000, 250000, 250000, 500000, 125000, 125000, 250000, 250000,  250000,  500000};
+	tb_init_io();
+	for(i=0;i<13;i++){
+		tb_play_frequency(notes[i],durations[i]);
+	}
+
+}
+
+static int do_tb_beep (struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	int freq   = simple_strtoul(argv[1], NULL, 10);
+	int time = simple_strtoul(argv[2], NULL, 10);
+	tb_init_io();
+	tb_play_frequency(freq, time );
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_beep, 3, 1, do_tb_beep,
+	"Plays a frequency for a specified amount of time in microseconds",
+	""
+);
+
+
+static int check_button(void){
+	U32 result = 0;
+	sp_gpio_in(BUTTON_IO,&result);
+ return result;
+}
+
+static int do_tb_upgok(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	ulong delay1 = simple_strtoul(argv[1], NULL, 10);
+	ulong delay2 = simple_strtoul(argv[1], NULL, 10);
+	tb_init_io();
+	sp_gpio_out_set(RED_LED, 1);
+	do{
+		if(check_button()==0){
+			ltpp3g2_easter_egg();
+		}
+		sp_gpio_out_set(GREEN_LED, 0);
+		mdelay(delay1);
+		if(check_button()==0){
+			ltpp3g2_easter_egg();
+		}
+		sp_gpio_out_set(GREEN_LED, 1);
+		mdelay(delay2);
+		if(check_button()==0){
+			ltpp3g2_easter_egg();
+		}
+	}while(1);
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_upgok, 3, 1, do_tb_upgok,
+	"Sets the green LED to repeat a slow blinking pattern and never exits.",
+	""
+);
+
+static int do_tb_button(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]){
+	int button_state = check_button();
+	if(button_state == 1) {
+		/*********************************************************************
+		* 'tb_button_state' is used in ~/SP7021/boot/uboot/include/configs/pentagram_common.h
+		*
+		* Note: function 'env_set' is the equivalent of the u-boot 'setenv' command.
+		**********************************************************************/
+		env_set("tb_button_state", "released");
+		/*********************************************************************/
+
+		printf("Button is released \r\n");
+	} else {
+		/*********************************************************************
+		* 'tb_button_state' is used in ~/SP7021/boot/uboot/include/configs/pentagram_common.h
+		*
+		* Note: function 'env_set' is the equivalent of the u-boot 'setenv' command.
+		**********************************************************************/
+		env_set("tb_button_state", "pressed");
+		/*********************************************************************/
+
+		printf("Button is pressed \r\n");
+	}
+
+	/* Output */
+	return 0;
+}
+
+U_BOOT_CMD(
+	tb_button, 1, 1, do_tb_button,
+	"Returns the state of the button",
+	""
+);
+
+
+
+
