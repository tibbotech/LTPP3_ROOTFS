--- /root/SP7021/boot/uboot/include/configs/pentagram_common.h	2023-05-22 11:15:28.000000000 +0000
+++ /root/LTPP3_ROOTFS/boot/configs/pentagram_common.h	2023-05-31 10:43:01.000000000 +0000
@@ -117,6 +117,97 @@
 #define RASPBIAN_CMD                    // Enable Raspbian command
 
 
+
+/* Added to handle the situation when the MD-button is pressed */
+/* Note: 'tb_button_state' is determined and set in boot/uboot/board/sunplus/pentagram_board/sp_go.c */
+#define MD_BUTTON_DETECT__VARIABLES_DEFINE \
+"setenv ISP_IF_NULL null \n; " \
+"setenv ISP_IF_SD1 sd_mmc_1 \n; " \
+"setenv ISP_IF_USB0 usb_dev_0 \n; " \
+"setenv SDDEV1_CMD mmc dev 1 \n; " \
+"setenv USBDEV0_CMD usb dev 0 \n; " \
+"setenv isp_if_test $ISP_IF_NULL \n; " \
+"setenv tb_button_state $ISP_IF_NULL \n; " \
+
+#define MD_BUTTON_DETECT__VARIABLES_INIT_SHOW \
+"echo ---:tibbo:init: variables \n; " \
+"echo ------: tb_button_state=$tb_button_state \n; " \
+"echo ------: ISP_IF_SD1=$ISP_IF_SD1 \n; " \
+"echo ------: ISP_IF_USB0=$ISP_IF_USB0 \n; " \
+"echo ------: SDDEV1_CMD=$SDDEV1_CMD \n; " \
+"echo ------: USBDEV0_CMD=$USBDEV0_CMD \n; " \
+"echo ------: isp_if_test=$isp_if_test \n; " \
+
+#define MD_BUTTON_DETECT__SDCARD_ISPRESENT \
+"echo ---:tibbo:detect: sd-card state... \n; " \
+"$SDDEV1_CMD \n; " \
+"if test $? = 0; then \n; " /* START: check if sd-card is PRESENT */ \
+"setenv isp_if_test $ISP_IF_SD1 \n; " \
+"fi \n; " /* END: check if sd-card is PRESENT */ \
+
+#define MD_BUTTON_DETECT__USBCARD_ISPRESENT \
+"echo ---:tibbo:detect: usb-0 state... \n; " \
+"echo ------:tibbo:note: if usb-0 and usb-1 are both in-use,... \n; " \
+"echo ------:tibbo:note: ...then usb-0 takes precedence\n; " \
+"$USBDEV0_CMD \n; " \
+"if test $? = 0; then \n; " /* START: check if usb-0 is PRESENT */ \
+"setenv isp_if_test $ISP_IF_USB0 \n; " \
+"fi \n; " /* END: check if usb-0 is PRESENT */ \
+
+#define MD_BUTTON_DETECT__MEM_WRITE_AND_READ_0X9E809408_0X00000017 \
+"echo ------:tibbo:note: this will run bootcmd 'isp_usb' \n; " \
+"mw.l  0x9e809408  0x00000017 1 \n; " \
+"echo ---:tibbo:get: memory-display of address (0x9e809408)\n; " \
+"md.l 0x9e809408 1 \n; " \
+
+#define MD_BUTTON_DETECT__MEM_WRITE_AND_READ_0X9E809408_0X00000007 \
+"echo ---:TIBBO:FORCE-SET: memory-write to address (0x9e809408): 0x00000007 \n; " \
+"echo ------:tibbo:note: this will run bootcmd 'isp_sdcard' \n; " \
+"mw.l  0x9e809408  0x00000007 1 \n; " \
+"echo ---:tibbo:get: memory-display of address (0x9e809408)\n; " \
+"md.l 0x9e809408 1 \n; " \
+
+#define MD_BUTTON_DETECT__NOTSUPPORTED \
+"echo ---:tibbo-info: md-button feature not enabled... \n; " \
+"echo \n; " \
+
+#define MD_BUTTON_DETECT__SD_OR_USB_BOOT \
+MD_BUTTON_DETECT__VARIABLES_DEFINE \
+"echo \n; " \
+"echo ---:tibbo:detect: md-button state... \n; " \
+"tb_button \n; " \
+"if test $tb_button_state != $ISP_IF_NULL; then \n; " /* START: check if variable is NOT an EMPTY STRING */ \
+"echo \n; " \
+"echo **************************************************\n; " \
+"echo     Boot from sd or usb\n; " \
+"echo **************************************************\n; " \
+MD_BUTTON_DETECT__VARIABLES_INIT_SHOW \
+"if test $tb_button_state = pressed; then \n; " /* START: check if md-button is PRESSED */ \
+"echo ---:tibbo:state: md-button is *pressed*... \n; " \
+MD_BUTTON_DETECT__SDCARD_ISPRESENT \
+"if test $isp_if_test = $ISP_IF_NULL; then \n; " /* START: check if isp_if_test is null */ \
+MD_BUTTON_DETECT__USBCARD_ISPRESENT \
+"fi \n; " /* END: check if isp_if_test is null */ \
+"fi \n; " /* END: check if md-button is PRESSED */ \
+"if test $isp_if_test != $ISP_IF_NULL; then; \n; " /* START: check if isp_if_test is NOT null */ \
+"if test $isp_if_test = $ISP_IF_USB0; then; \n; " /* START: check if isp_if_test is usb_dev_0/mmc_dev_1 */ \
+MD_BUTTON_DETECT__MEM_WRITE_AND_READ_0X9E809408_0X00000017 \
+"else; \n; " /* ELSE: check if isp_if_test is usb_dev_0/mmc_dev_1 */ \
+MD_BUTTON_DETECT__MEM_WRITE_AND_READ_0X9E809408_0X00000007 \
+"fi; \n; " /* END: check if isp_if_test is usb_dev_0/mmc_dev_1 */ \
+"else; \n; " \
+"echo \n; " \
+"echo ---:tibbo:state: md-button *not* pressed... \n; " \
+"echo ---:tibbo:start: boot normally... \n; " \
+"fi; \n; " /* END: check if isp_if_test is NOT null */ \
+"echo ************************************************** \n; " \
+"echo \n; " \
+"else; \n; " \
+MD_BUTTON_DETECT__NOTSUPPORTED \
+"fi \n; " /* END: check if variable is NOT an EMPTY STRING */ \
+/* Added to handle the situation when the MD-button is pressed */
+
+
 /*
  * In the beginning, bootcmd will check bootmode in SRAM and the flag
  * if_zebu to choose different boot flow :
@@ -154,6 +245,7 @@
  */
 #define CONFIG_BOOTCOMMAND \
 "echo [scr] bootcmd started; " \
+"run md_button_detect__sdcard_or_usb_boot; " /* Added to handle the situation when the MD-button is pressed */ \
 "md.l ${bootinfo_base} 1; " \
 "if itest.l *${bootinfo_base} == " __stringify(SPI_NOR_BOOT) "; then " \
 	"if itest ${if_zebu} == 1; then " \
@@ -300,7 +392,7 @@
 
 #define CONFIG_EXTRA_ENV_SETTINGS \
 "sz_sign=0x100\0" \
-"b_c=console=tty1 console=ttyS0,115200 earlyprintk\0" \
+"b_c=console=tty1 console=ttyS0,115200 earlyprintk tb_overlay=/dev/mmcblk0p10\0" \
 "emmc_root=root=/dev/mmcblk0p8 rw rootwait\0" \
 "stdin=" STDIN_CFG "\0" \
 "stdout=" STDOUT_CFG "\0" \
@@ -364,7 +456,7 @@
 	"cp.l ${addr_src_kernel} ${addr_dst_kernel} ${sz_kernel}; " \
 	dbg_scr("echo sp_go ${addr_dst_kernel} ${fdtcontroladdr}; ") \
 	"sp_go ${addr_dst_kernel} ${fdtcontroladdr}\0" \
-"emmc_boot=sp_wdt_set;" \
+"emmc_boot= sp_wdt_set;" \
 	DTS_LOAD_EMMC \
 	"mmc read ${addr_tmp_header} ${addr_src_kernel} 0x1; " \
 	"setenv tmpval 0; setexpr tmpaddr ${addr_tmp_header} + 0x0c; run be2le; " \
@@ -464,8 +556,13 @@
 	"dhcp $isp_ram_addr $serverip:TFTP0000.BIN; " \
 	"setenv isp_main_storage ${sp_main_storage} && printenv isp_main_storage; " \
 	"setexpr script_addr $isp_ram_addr + 0x00 && setenv script_addr 0x${script_addr} && source $script_addr; " \
+	"\0" \
+"md_button_detect__sdcard_or_usb_boot=;" /* Added to handle the situation when the MD-button is pressed */ \
+	MD_BUTTON_DETECT__SD_OR_USB_BOOT \
 	"\0"
 
+
+
 /* MMC related configs */
 #define CONFIG_SUPPORT_EMMC_BOOT
 /* #define CONFIG_MMC_TRACE */
